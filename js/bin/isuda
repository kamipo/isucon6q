#!/usr/bin/env node

/**
 * Module dependencies.
 */

var cluster = require('cluster');
var app = require('../isuda');
var debug = require('debug')('demo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

if (cluster.isMaster) {
  var numChild = process.env.PROCESS || 3;
  for (var i = 0; i < numChild; i++) {
    cluster.fork();
  }
} else {
  var isuda = http.createServer(app.callback());
  var isudaPort = normalizePort(process.env.ISUDA_PORT || '5000');
  var port = isudaPort;
  isuda.listen(isudaPort);
  isuda.on('error', onError);
  isuda.on('listening', onListeningIsuda);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListeningIsuda() {
    var addr = isuda.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}
